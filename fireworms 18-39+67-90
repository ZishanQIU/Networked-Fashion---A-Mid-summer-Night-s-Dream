values = array(pixelCount)
hues = array(pixelCount)


// Called between frames
export function beforeRender(delta) {
  // Loop through every pixel
	for (i = 18; 18<= i && i<= 39; i++) {
	  // `delta` is how many ms have elapsed since the last beforeRender().
	  // Therefore at 200 Frames Per Second (FPS), delta = 5, and each pixel's 
	  // 0..1 value would be reduced by 0.0025 each frame.
  	values[i] -= .005 * delta * .18
  	
  	// If this pixel is now full faded fully off
  	if (values[i] <= 0) {
  	  values[i] = random(1) // Bump it back up to a random number 0..1
  	  
  	  /*
  	    Set the new color to be the sum of two components: 
  	      1) A timer that sawtooths from 0 to 1 every 4.6 seconds
  	      2) A 0.2 boost for the pixels at the center of the strip 
  	    If you're thinking, "Wait, aren't hue values between 0 and 1? This goes
  	    from 0 to 1.2," just know that hsv() 'wraps' hues for us. 1.1 => 0.1
      */
      // compute a number between yellow (0.166) and green (0.333)
  //	  hues[i] = time(4.6 / 65.536) + 0.2 * triangle(i / 20) // smalleset: 0 + .2 * 0 = 0; largest: 1 + .2 * 1 = 1.2
  	  hues[i] = 0.16 + 0.28 * time(4.6 / 65.536);
  	}
	}
		for (i = 67; 18<= i && i<= 90; i++) {
	  // `delta` is how many ms have elapsed since the last beforeRender().
	  // Therefore at 200 Frames Per Second (FPS), delta = 5, and each pixel's 
	  // 0..1 value would be reduced by 0.0025 each frame.
  	values[i] -= .005 * delta * .18
  	
  	// If this pixel is now full faded fully off
  	if (values[i] <= 0) {
  	  values[i] = random(1) // Bump it back up to a random number 0..1
  	  
  	  /*
  	    Set the new color to be the sum of two components: 
  	      1) A timer that sawtooths from 0 to 1 every 4.6 seconds
  	      2) A 0.2 boost for the pixels at the center of the strip 
  	    If you're thinking, "Wait, aren't hue values between 0 and 1? This goes
  	    from 0 to 1.2," just know that hsv() 'wraps' hues for us. 1.1 => 0.1
      */
      // compute a number between yellow (0.166) and green (0.333)
  //	  hues[i] = time(4.6 / 65.536) + 0.2 * triangle(i / 20) // smalleset: 0 + .2 * 0 = 0; largest: 1 + .2 * 1 = 1.2
  	  hues[i] = 0.16 + 0.28 * time(4.6 / 65.536);
  	}
	}
}

/*
  render() will be called once per pixel per frame, and `index` is the pixel's 
  position in the strip. The first pixel is index 0. If we have 60 total pixels 
  (pixelCount == 60), the last one would be index 59.
*/
export function render(index) {
  h = hues[index]    // Retrieve the hue for this pixel
  v = values[index]  // Retrieve the brightness value for this pixel
  v = v * v          // Gamma scaling: v is in 0..1 so this makes small v smaller 
	hsv(h, 1, v)       // Saturation is 1 -- no white is mixed in
}
